---
# file: main.yml
# The tasks for the Cobbler role

# -------------
# Prerequisites
# -------------

- name: unsupported package manager
  fail: msg='this playbook requries yum or apt only'
  when: ansible_pkg_mgr != 'yum' and ansible_pkg_mgr != 'apt'

# ---------------
# Package Sources
# ---------------

# yum
- name: check epel repo (yum)
  stat: path=/etc/yum.repos.d/epel.repo
  register: epel_file

- name: configure epel repo (yum)
  template: src=epel.repo.j2
        dest=/etc/yum.repos.d/epel.repo
        owner=root group=root mode=0644
  when: ansible_pkg_mgr == 'yum' and not epel_file.stat.exists

# ------------
# Dependencies
# ------------

# yum
- name: install dependencies (yum)
  yum: name={{ item }} state=present
  with_items:
    - xinetd
    - dhcp
    - syslinux
  when: ansible_pkg_mgr == 'yum'

# apt
- name: install dependencies (apt)
  apt: name={{ item }} state=present update_cache=true
  with_items:
    - xinetd
    - isc-dhcp-server
    - debmirror
  when: ansible_pkg_mgr == 'apt'

# -------
# selinux
# -------
- name: set selinux to permissive (yum)
  selinux: policy=targeted state=permissive
  when: ansible_pkg_mgr == 'yum'

# -----
# dhcpd
# -----
- name: configure dhcpd (yum)
  template: src=dhcpd.j2 dest=/etc/sysconfig/dhcpd
  when: ansible_pkg_mgr == 'yum'

- name: enable dhcpd (yum)
  service: name=dhcpd state=stopped enabled=true
  when: ansible_pkg_mgr == 'yum'

# ---------------
# isc-dhcp-server
# ---------------
- name: configure isc-dhcp-server (apt)
  template: src=isc-dhcp-server.j2 dest=/etc/default/isc-dhcp-server
  when: ansible_pkg_mgr == 'apt'

- name: enable isc-dhcp-server (apt)
  service: name=isc-dhcp-server state=stopped enabled=true
  when: ansible_pkg_mgr == 'apt'

# ---------
# firewalld
# ---------
- name: check if firewalld is installed
  sudo: yes
  command: which firewalld
  register: firewalld
  changed_when: false
  ignore_errors: true

- name: check if firewalld service is running
  sudo: yes
  command: firewall-cmd --state
  register: firewalld_svc
  ignore_errors: true
  when: firewalld|success

- name: enable cobbler tftpd through firewalld
  sudo: yes
  firewalld: service=tftp permanent=true state=enabled
  notify: restart firewalld
  when: firewalld|success and firewalld_svc.stdout=='running'

- name: enable cobbler httpd through firewalld
  sudo: yes
  firewalld: service=http permanent=true state=enabled
  notify: restart firewalld
  when: firewalld|success and firewalld_svc.stdout=='running'

# ---
# ufw
# ---
- name: check if ufw is installed
  sudo: yes
  command: which ufw
  register: ufw
  changed_when: false
  ignore_errors: true

- name: allow tftp through ufw
  sudo: yes
  ufw: rule=allow port=69 proto=tcp
  when: ufw|success

- name: allow http through ufw
  sudo: yes
  ufw: rule=allow port=80 proto=tcp
  when: ufw|success

# -------
# Cobbler
# -------
- name: install cobbler (yum)
  yum: name=cobbler state=present
  when: ansible_pkg_mgr == 'yum'

- name: install cobbler (apt)
  apt: name=cobbler state=present
  when: ansible_pkg_mgr == 'apt'

- name: start and enable apache2 (apt)
  service: name=apache2 state=started enabled=true
  when: ansible_pkg_mgr == 'apt'

- name: start and enable httpd (yum)
  service: name=httpd state=started enabled=true
  when: ansible_pkg_mgr == 'yum'

- name: configure xinetd rsync
  copy: src=rsync
        dest=/etc/xinetd.d/
        owner=root group=root mode=0644
  notify: restart xinetd

- name: start and enable xinetd
  service: name=xinetd state=started enabled=true

- name: configure cobbler
  template: src=settings.j2 dest=/etc/cobbler/settings
  notify:
    - restart cobbler
    - wait for cobbler
    - sync cobbler

- name: start and enable cobbler (apt)
  service: name=cobbler state=started enabled=true
  when: ansible_pkg_mgr == 'apt'

- name: start and enable cobblerd (yum)
  service: name=cobblerd state=started enabled=true
  when: ansible_pkg_mgr == 'yum'

- name: get cobbler loaders
  command: cobbler get-loaders
  args:
    creates: /var/lib/cobbler/loaders/README
  ignore_errors: yes
  when: not skipping_signature_update
  notify:
    - restart cobbler
    - wait for cobbler
    - sync cobbler

- name: update cobbler signatures
  command: cobbler signature update
  ignore_errors: yes
  when: not skipping_signature_update
  notify:
    - restart cobbler
    - wait for cobbler
    - sync cobbler

- name: configure cobbler dhcp
  template: src=dhcp.template.j2 dest=/etc/cobbler/dhcp.template
  notify:
    - restart cobbler
    - wait for cobbler
    - sync cobbler

# ---------------------
# Cobbler Distributions
# ---------------------

# Attempt to un-mount any previous disto mount points, can occur if previous run failed
- name: umount isos
  shell: umount {{ item.path | quote }}
  with_items: distros
  when: distros is defined
  ignore_errors: yes

- name: create iso directory to hold distro images
  file: path=~/iso state=directory

# Download each defined distro ISO if it doesn't already exist
- name: download distro iso files
  get_url: url={{ item.url }} dest={{ item.file }}
  with_items: distros
  when: distros is defined

# Add the each distro/profile pair only if the distro doesn't already exist
- name: add distro/profile pairs to cobbler
  shell: >
    cobbler distro report --name="{{ item.name }}-{{ item.arch }}"
    || (mkdir -p {{ item.path | quote }}
    && mount -t iso9660 -o loop,ro {{ item.file | quote }} {{ item.path | quote }}
    && cobbler import --path={{ item.path | quote }} --name={{ item.name | quote }} --arch={{ item.arch | quote }} {% if item.kickstart is defined %}--kickstart={{ item.kickstart | quote }}{% endif %}
    && umount {{ item.path | quote }})
  with_items: distros
  when: distros is defined
  notify:
    - restart cobbler
    - wait for cobbler
    - sync cobbler

- name: check distro exists in cobbler
  with_items: distro_imports
  command: cobbler distro report --name="{{ item.name }}-{{ item.arch }}"
  register: distro_result
  ignore_errors: true
  when: distro_imports is defined

- name: import distro to cobbler
  shell: cobbler import --name="{{ item.name }}-{{ item.arch }}" --path="{{ item.url }}" --arch="{{ item.arch }}"
  with_items: distro_imports
  when: distro_imports is defined and distro_result|failed
  notify:
    - restart cobbler
    - wait for cobbler
    - sync cobbler

# ---------------
# Cobbler Repos
# ---------------

- name: add repos to cobbler
  shell: >
    cobbler repo add
    --clobber
    --name={{ item.name | quote }}
    --mirror={{ item.mirror | quote }}
    {% if item.arch is defined %}--arch={{ item.arch | quote }}{% endif %}
    {% if item.mirror_locally is defined %}--mirror-locally={{ item.mirror_locally | quote }}{% endif %}
  with_items: repos
  when: repos is defined
  notify:
    - restart cobbler
    - wait for cobbler
    - sync cobbler

# ---------------
# Cobbler Profiles
# ---------------

- name: add profiles to cobbler
  shell: >
    cobbler profile add
    --clobber
    --name={{ item.name | quote }}
    --distro={{ item.distro | quote }}
    {% if item.kickstart is defined %}--kickstart={{ item.kickstart | quote }}{% endif %}
    {% if item.ksmeta is defined %}--ksmeta={{ item.ksmeta | quote }}{% endif %}
    {% if item.repos is defined %}--repos={{ item.repos | quote }}{% endif %}
  with_items: profiles
  when: profiles is defined
  notify:
    - restart cobbler
    - wait for cobbler
    - sync cobbler

# ---------------
# Cobbler Systems
# ---------------

- name: add systems to cobbler
  shell: >
    cobbler system add
    --clobber
    --name={{ item.name | quote }}
    --hostname={{ item.hostname | quote }}
    {% if item.name_servers_search is defined %}--name-servers-search={{ item.name_servers_search | quote }}{% endif %}
    --profile={{ item.profile | quote }}
    --ip-address={{ item.ip | quote }}
    --gateway={{ item.gateway | quote }}
    --mac={{ item.mac | quote }}
    --interface={{ item.interface | quote }}
    --netboot-enabled=true
    {% if item.static is defined %}--static={{ item.static | quote }}{% endif %}
    {% if item.dhcptag is defined %}--dhcp-tag={{ item.dhcptag | quote }}{% endif %}
    {% if item.next_server is defined %}--server {{ item.next_server | quote }}{% endif %}
  with_items: systems
  when: systems is defined
  notify:
    - restart cobbler
    - wait for cobbler
    - sync cobbler
